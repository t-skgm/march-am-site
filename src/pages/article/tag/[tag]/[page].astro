---
import Layout from '../../../../layouts/Layout.astro'
import Main from '../../../../components/molecules/Main.astro'
import ArticleList from '../../../../components/organisms/ArticleList.astro'
import Paginate from '../../../../components/molecules/Paginate.astro'
import type { GetStaticPaths, Page } from 'astro'
import { routes } from '../../../../constants/routes'
import { cleanPathParam } from '../../../../utils/cleanPathParam'
import { configs } from '../../../../constants/site'
import { normalizeTag } from '../../../../utils/collection/common'
import type { ArticleEntry } from '../../../../infra/contentful/article'
import { fetchArticleEntries, fetchArticleTags } from '../../../../infra/contentful/article'

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const entries = await fetchArticleEntries()
  const uniqTags = await fetchArticleTags()

  return uniqTags.map((tag) => {
    const taggedEntries = entries.filter((e) => (e.tags ?? []).map(normalizeTag).includes(tag))
    const safeTag = cleanPathParam(tag)

    return paginate(taggedEntries, {
      params: { tag: safeTag },
      pageSize: configs.paginateSize
    })
  })
}

export type Props = {
  page: Page<ArticleEntry>
  /** /[tag]/page からのアクセスか  */
  isIndexPage?: boolean
}
const { page, isIndexPage } = Astro.props

const { tag: safeTag } = Astro.params
const tag = safeTag ?? '?' // FIXME
const title = `Tag: ${tag} (page ${page.currentPage})`
---

<Layout title={title} canonicalPath={isIndexPage ? routes.article.tag.page(tag, 1) : undefined}>
  <Main>
    <h1>{title}</h1>
    <ArticleList entries={page.data} />
    <Paginate page={page} urlWithPage={(page) => routes.article.tag.page(tag, page)} />
  </Main>
</Layout>
